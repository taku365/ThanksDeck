# CIチェックが通ること確認した上で、Rails を自動デプロイ
name: Continuous Delivery


# main にpush された時に実行
on:
 push:
   branches: [ "main" ]


# 共通変数
env:
 AWS_REGION: ap-northeast-1
 ECS_CLUSTER: thanksdeck-cluster
 ECS_SERVICE_BACKEND: thanksdeck-task-definition-backend-service-iu0hljrf
 ECS_TASK_DEFINITION_BACKEND: ./rails/task-definition.json
 ECR_REPOSITORY_RAILS: thanksdeck-rails
 CONTAINER_NAME_RAILS: rails


# ECR push するための権限設定
permissions:
 contents: read


# 当 workflow が行う処理
jobs:
# 処理① ci.yml によるチェック
  ci:
    uses: ./.github/workflows/ci.yml
# 処理② Railsの自動デプロイ。動作には ci のクリアが必要
  deploy-rails:
  needs: [ci]
  runs-on: ubuntu-latest
  environment: production


  steps:
  - name: Checkout
    uses: actions/checkout@v4


  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ env.AWS_REGION }}


  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v1


  # ARM64クロスビルドに必要（ホストはx86_64のため）
  - name: Set up QEMU (for ARM64)
    uses: docker/setup-qemu-action@v3


  # buildx を使う（multi-archビルド対応）
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3


  # 素の `docker build` → buildx + --platform=linux/arm64/v8 に変更
  - name: Build (ARM64) and push image to Amazon ECR
    id: build-image           # ← 既存の参照維持のためIDはそのまま
    env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      IMAGE_TAG: ${{ github.sha }}
    run: |
      docker buildx build \
      --platform linux/arm64/v8 \
      -t $ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG \
      -f ./rails/Dockerfile.prod ./rails \
      --push
      echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG" >> $GITHUB_OUTPUT


  - name: Fill in the new image ID in the Amazon ECS task definition
    id: task-def
    uses: aws-actions/amazon-ecs-render-task-definition@v1
    with:
      task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
      container-name: ${{ env.CONTAINER_NAME_RAILS }}
      image: ${{ steps.build-image.outputs.image }}


  - name: Deploy Amazon ECS task definition
    uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    with:
      task-definition: ${{ steps.task-def.outputs.task-definition }}
      service: ${{ env.ECS_SERVICE_BACKEND }}
      cluster: ${{ env.ECS_CLUSTER }}
      wait-for-service-stability: true
